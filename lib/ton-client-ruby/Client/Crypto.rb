module TonClient

  class Crypto
    include CommonInstanceHelpers

    attr_reader :core, :context
    MODULE = self.to_s.downcase.gsub(/^(.+::|)(\w+)$/, '\2').freeze

    def initialize(context: Context.new, core: TonClient::TonBinding)
      @context = context
      @core = core
    end

    # INPUT: TSDKParamsOfFactorize
    # composite: String -     # Hexadecimal representation of u64 composite number.
    # RESPONSE: TSDKResultOfFactorize
    # factors: Array -     # Two factors of composite or empty if composite can't be factorized.
    def factorize(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfModularPower
    # base: String -     # `base` argument of calculation.
    # exponent: String -     # `exponent` argument of calculation.
    # modulus: String -     # `modulus` argument of calculation.
    # RESPONSE: TSDKResultOfModularPower
    # modular_power: String -     # Result of modular exponentiation
    def modular_power(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfTonCrc16
    # data: String -     # Input data for CRC calculation.    # Encoded with `base64`.
    # RESPONSE: TSDKResultOfTonCrc16
    # crc: Number -     # Calculated CRC for input data.
    def ton_crc16(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfGenerateRandomBytes
    # length: Number -     # Size of random byte array.
    # RESPONSE: TSDKResultOfGenerateRandomBytes
    # bytes: String -     # Generated bytes encoded in `base64`.
    def generate_random_bytes(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfConvertPublicKeyToTonSafeFormat
    # public_key: String -     # Public key - 64 symbols hex string
    # RESPONSE: TSDKResultOfConvertPublicKeyToTonSafeFormat
    # ton_public_key: String -     # Public key represented in TON safe format.
    def convert_public_key_to_ton_safe_format(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # RESPONSE: TSDKKeyPair
    # public: String -     # Public key - 64 symbols hex string
    # secret: String -     # Private key - u64 symbols hex string
    def generate_random_sign_keys(&block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: {}, &block)
    end

    # INPUT: TSDKParamsOfSign
    # unsigned: String -     # Data that must be signed encoded in `base64`.
    # keys: TSDKKeyPair -     # Sign keys.
    # RESPONSE: TSDKResultOfSign
    # signed: String -     # Signed data combined with signature encoded in `base64`.
    # signature: String -     # Signature encoded in `hex`.
    def sign(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfVerifySignature
    # signed: String -     # Signed data that must be verified encoded in `base64`.
    # public: String -     # Signer's public key - 64 symbols hex string
    # RESPONSE: TSDKResultOfVerifySignature
    # unsigned: String -     # Unsigned data encoded in `base64`.
    def verify_signature(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfHash
    # data: String -     # Input data for hash calculation.    # Encoded with `base64`.
    # RESPONSE: TSDKResultOfHash
    # hash: String -     # Hash of input `data`.    # Encoded with 'hex'.
    def sha256(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfHash
    # data: String -     # Input data for hash calculation.    # Encoded with `base64`.
    # RESPONSE: TSDKResultOfHash
    # hash: String -     # Hash of input `data`.    # Encoded with 'hex'.
    def sha512(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfScrypt
    # password: String -     # The password bytes to be hashed. Must be encoded with `base64`.
    # salt: String -     # Salt bytes that modify the hash to protect against Rainbow table attacks. Must be encoded with `base64`.
    # log_n: Number -     # CPU/memory cost parameter
    # r: Number -     # The block size parameter, which fine-tunes sequential memory read size and performance.
    # p: Number -     # Parallelization parameter.
    # dk_len: Number -     # Intended output length in octets of the derived key.
    # RESPONSE: TSDKResultOfScrypt
    # key: String -     # Derived key.    # Encoded with `hex`.
    def scrypt(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfNaclSignKeyPairFromSecret
    # secret: String -     # Secret key - unprefixed 0-padded to 64 symbols hex string
    # RESPONSE: TSDKKeyPair
    # public: String -     # Public key - 64 symbols hex string
    # secret: String -     # Private key - u64 symbols hex string
    def nacl_sign_keypair_from_secret_key(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfNaclSign
    # unsigned: String -     # Data that must be signed encoded in `base64`.
    # secret: String -     # Signer's secret key - unprefixed 0-padded to 64 symbols hex string
    # RESPONSE: TSDKResultOfNaclSign
    # signed: String -     # Signed data, encoded in `base64`.
    def nacl_sign(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfNaclSignOpen
    # signed: String -     # Signed data that must be unsigned.    # Encoded with `base64`.
    # public: String -     # Signer's public key - unprefixed 0-padded to 64 symbols hex string
    # RESPONSE: TSDKResultOfNaclSignOpen
    # unsigned: String -     # Unsigned data, encoded in `base64`.
    def nacl_sign_open(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfNaclSign
    # unsigned: String -     # Data that must be signed encoded in `base64`.
    # secret: String -     # Signer's secret key - unprefixed 0-padded to 64 symbols hex string
    # RESPONSE: TSDKResultOfNaclSignDetached
    # signature: String -     # Signature encoded in `hex`.
    def nacl_sign_detached(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfNaclSignDetachedVerify
    # unsigned: String -     # Unsigned data that must be verified.    # Encoded with `base64`.
    # signature: String -     # Signature that must be verified.    # Encoded with `hex`.
    # public: String -     # Signer's public key - unprefixed 0-padded to 64 symbols hex string.
    # RESPONSE: TSDKResultOfNaclSignDetachedVerify
    # succeeded: Boolean -     # `true` if verification succeeded or `false` if it failed
    def nacl_sign_detached_verify(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # RESPONSE: TSDKKeyPair
    # public: String -     # Public key - 64 symbols hex string
    # secret: String -     # Private key - u64 symbols hex string
    def nacl_box_keypair(&block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: {}, &block)
    end

    # INPUT: TSDKParamsOfNaclBoxKeyPairFromSecret
    # secret: String -     # Secret key - unprefixed 0-padded to 64 symbols hex string
    # RESPONSE: TSDKKeyPair
    # public: String -     # Public key - 64 symbols hex string
    # secret: String -     # Private key - u64 symbols hex string
    def nacl_box_keypair_from_secret_key(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfNaclBox
    # decrypted: String -     # Data that must be encrypted encoded in `base64`.
    # nonce: String -     # Nonce, encoded in `hex`
    # their_public: String -     # Receiver's public key - unprefixed 0-padded to 64 symbols hex string
    # secret: String -     # Sender's private key - unprefixed 0-padded to 64 symbols hex string
    # RESPONSE: TSDKResultOfNaclBox
    # encrypted: String -     # Encrypted data encoded in `base64`.
    def nacl_box(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfNaclBoxOpen
    # encrypted: String -     # Data that must be decrypted.    # Encoded with `base64`.
    # nonce: String - 
    # their_public: String -     # Sender's public key - unprefixed 0-padded to 64 symbols hex string
    # secret: String -     # Receiver's private key - unprefixed 0-padded to 64 symbols hex string
    # RESPONSE: TSDKResultOfNaclBoxOpen
    # decrypted: String -     # Decrypted data encoded in `base64`.
    def nacl_box_open(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfNaclSecretBox
    # decrypted: String -     # Data that must be encrypted.    # Encoded with `base64`.
    # nonce: String -     # Nonce in `hex`
    # key: String -     # Secret key - unprefixed 0-padded to 64 symbols hex string
    # RESPONSE: TSDKResultOfNaclBox
    # encrypted: String -     # Encrypted data encoded in `base64`.
    def nacl_secret_box(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfNaclSecretBoxOpen
    # encrypted: String -     # Data that must be decrypted.    # Encoded with `base64`.
    # nonce: String -     # Nonce in `hex`
    # key: String -     # Public key - unprefixed 0-padded to 64 symbols hex string
    # RESPONSE: TSDKResultOfNaclBoxOpen
    # decrypted: String -     # Decrypted data encoded in `base64`.
    def nacl_secret_box_open(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfMnemonicWords
    # dictionary: TSDKMnemonicDictionary -     # Dictionary identifier
    # RESPONSE: TSDKResultOfMnemonicWords
    # words: String -     # The list of mnemonic words
    def mnemonic_words(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfMnemonicFromRandom
    # dictionary: TSDKMnemonicDictionary -     # Dictionary identifier
    # word_count: Number -     # Mnemonic word count
    # RESPONSE: TSDKResultOfMnemonicFromRandom
    # phrase: String -     # String of mnemonic words
    def mnemonic_from_random(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfMnemonicFromEntropy
    # entropy: String -     # Entropy bytes.    # Hex encoded.
    # dictionary: TSDKMnemonicDictionary -     # Dictionary identifier
    # word_count: Number -     # Mnemonic word count
    # RESPONSE: TSDKResultOfMnemonicFromEntropy
    # phrase: String -     # Phrase
    def mnemonic_from_entropy(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfMnemonicVerify
    # phrase: String -     # Phrase
    # dictionary: TSDKMnemonicDictionary -     # Dictionary identifier
    # word_count: Number -     # Word count
    # RESPONSE: TSDKResultOfMnemonicVerify
    # valid: Boolean -     # Flag indicating if the mnemonic is valid or not
    def mnemonic_verify(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfMnemonicDeriveSignKeys
    # phrase: String -     # Phrase
    # path: String -     # Derivation path, for instance "m/44'/396'/0'/0/0"
    # dictionary: TSDKMnemonicDictionary -     # Dictionary identifier
    # word_count: Number -     # Word count
    # RESPONSE: TSDKKeyPair
    # public: String -     # Public key - 64 symbols hex string
    # secret: String -     # Private key - u64 symbols hex string
    def mnemonic_derive_sign_keys(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfHDKeyXPrvFromMnemonic
    # phrase: String -     # String with seed phrase
    # dictionary: TSDKMnemonicDictionary -     # Dictionary identifier
    # word_count: Number -     # Mnemonic word count
    # RESPONSE: TSDKResultOfHDKeyXPrvFromMnemonic
    # xprv: String -     # Serialized extended master private key
    def hdkey_xprv_from_mnemonic(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfHDKeyDeriveFromXPrv
    # xprv: String -     # Serialized extended private key
    # child_index: Number -     # Child index (see BIP-0032)
    # hardened: Boolean -     # Indicates the derivation of hardened/not-hardened key (see BIP-0032)
    # RESPONSE: TSDKResultOfHDKeyDeriveFromXPrv
    # xprv: String -     # Serialized extended private key
    def hdkey_derive_from_xprv(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfHDKeyDeriveFromXPrvPath
    # xprv: String -     # Serialized extended private key
    # path: String -     # Derivation path, for instance "m/44'/396'/0'/0/0"
    # RESPONSE: TSDKResultOfHDKeyDeriveFromXPrvPath
    # xprv: String -     # Derived serialized extended private key
    def hdkey_derive_from_xprv_path(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfHDKeySecretFromXPrv
    # xprv: String -     # Serialized extended private key
    # RESPONSE: TSDKResultOfHDKeySecretFromXPrv
    # secret: String -     # Private key - 64 symbols hex string
    def hdkey_secret_from_xprv(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfHDKeyPublicFromXPrv
    # xprv: String -     # Serialized extended private key
    # RESPONSE: TSDKResultOfHDKeyPublicFromXPrv
    # public: String -     # Public key - 64 symbols hex string
    def hdkey_public_from_xprv(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfChaCha20
    # data: String -     # Source data to be encrypted or decrypted.    # Must be encoded with `base64`.
    # key: String -     # 256-bit key.    # Must be encoded with `hex`.
    # nonce: String -     # 96-bit nonce.    # Must be encoded with `hex`.
    # RESPONSE: TSDKResultOfChaCha20
    # data: String -     # Encrypted/decrypted data.    # Encoded with `base64`.
    def chacha20(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # RESPONSE: TSDKRegisteredSigningBox
    # handle: TSDKSigningBoxHandle -     # Handle of the signing box.
    def register_signing_box(&block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: {}, &block)
    end

    # INPUT: TSDKKeyPair
    # public: String -     # Public key - 64 symbols hex string
    # secret: String -     # Private key - u64 symbols hex string
    # RESPONSE: TSDKRegisteredSigningBox
    # handle: TSDKSigningBoxHandle -     # Handle of the signing box.
    def get_signing_box(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKRegisteredSigningBox
    # handle: TSDKSigningBoxHandle -     # Handle of the signing box.
    # RESPONSE: TSDKResultOfSigningBoxGetPublicKey
    # pubkey: String -     # Public key of signing box.    # Encoded with hex
    def signing_box_get_public_key(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKParamsOfSigningBoxSign
    # signing_box: TSDKSigningBoxHandle -     # Signing Box handle.
    # unsigned: String -     # Unsigned user data.    # Must be encoded with `base64`.
    # RESPONSE: TSDKResultOfSigningBoxSign
    # signature: String -     # Data signature.    # Encoded with `hex`.
    def signing_box_sign(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

    # INPUT: TSDKRegisteredSigningBox
    # handle: TSDKSigningBoxHandle -     # Handle of the signing box.
    def remove_signing_box(payload, &block)
      core.requestLibrary(context: context.id, method_name: full_method_name(MODULE, __method__.to_s), payload: payload, &block)
    end

  end
end

